@using FSharp.MetadataFormat
@{
  Layout = "template";
  Title = Model.Type.Name + " - " + Properties["project-name"];
}

@{
  // Get all the members & comment for the type
  var members = (IEnumerable<Member>)Model.Type.AllMembers;
  var comment = (Comment)Model.Type.Comment;
  
  // Group all members by their category which is an inline annotation
  // that can be added to members using special XML comment:
  //
  //     /// [category:Something]
  //
  // ...and can be used to categorize members in large modules or types
  // (but if this is not used, then all members end up in just one category)
  var byCategory = members
    .GroupBy(m => m.Category)
    .OrderBy(g => String.IsNullOrEmpty(g.Key) ? "ZZZ" : g.Key)
    .Select((g, n) => new { 
      Index = n, 
      GroupKey = g.Key, 
      Members = g.OrderBy(m => m.Kind == MemberKind.StaticParameter ? "" : m.Name), 
      Name = String.IsNullOrEmpty(g.Key) ? "Other type members" : g.Key 
    });
}

<h1>@Model.Type.Name</h1>
<div class="xmldoc">
  @foreach (var sec in comment.Sections) {
    // XML comment for the type has multiple sections that can be labelled
    // with categories (to give comment for an individual category). Here, 
    // we print only those that belong to the <default> section.
    if (!byCategory.Any(g => g.GroupKey == sec.Key)) {
      if (sec.Key != "<default>") {
        <h2>@sec.Key</h2>
      }
      @sec.Value
    }
  }
</div>
@if (byCategory.Count() > 1)
{
  <!-- If there is more than 1 category in the type, generate TOC -->
  <h2>Table of contents</h2>
  <ul>
    @foreach (var g in byCategory)
    {
      <li><a href="@("#section" + g.Index.ToString())">@g.Name</a></li>
    }
  </ul>
}
@foreach (var g in byCategory) {
  // Iterate over all the categories and print members. If there are more than one
  // categories, print the category heading (as <h2>) and add XML comment from the type
  // that is related to this specific category.
  if (byCategory.Count() > 1) {
    <h2>@g.Name<a name="@("section" + g.Index.ToString())">&#160;</a></h2>
    var info = comment.Sections.FirstOrDefault(kvp => kvp.Key == g.GroupKey);
    if (info.Key != null) {
      <div class="xmldoc">
        @info.Value
      </div>
    }
  }

  @RenderPart("part-members", new {
    Header = "Union Cases",
    TableHeader = "Union Case",
    Members = g.Members.Where(m => m.Kind == MemberKind.UnionCase)
  })

  @RenderPart("part-members", new {
    Header = "Record Fields",
    TableHeader = "Record Field",
    Members = g.Members.Where(m => m.Kind == MemberKind.RecordField)
  })
        
  @RenderPart("part-members", new {
    Header = "Static parameters",
    TableHeader = "Static parameters",
    Members = g.Members.Where(m => m.Kind == MemberKind.StaticParameter)
  })

  @RenderPart("part-members", new {
    Header = "Constructors",
    TableHeader = "Constructor",
    Members = g.Members.Where(m => m.Kind == MemberKind.Constructor)
  })

  @RenderPart("part-members", new {
    Header = "Instance members",
    TableHeader = "Instance member",
    Members = g.Members.Where(m => m.Kind == MemberKind.InstanceMember)
  })

  @RenderPart("part-members", new {
    Header = "Static members",
    TableHeader = "Static member",
    Members = g.Members.Where(m => m.Kind == MemberKind.StaticMember)
  })
}

